import sys
import json
import shutil
import subprocess
import warnings
warnings.filterwarnings("ignore")

sys.path.insert(0, 'src')
from etl import download_apks
from model import run

TEST_DATA_PARAMS = 'config/test-data-params.json'
TRAIN_DATA_PARAMS = 'config/data-params.json'
TEST_PROJECT_PARAMS = 'config/test-project-params.json'


def load_params(fp):
    with open(fp) as fh:
        param = json.load(fh)
    return param


def main(targets):
    
    if 'clean' in targets:
        shutil.rmtree('result', ignore_errors=True)
        
        
    if 'test-project' in targets:
        cfg = load_params(TEST_PROJECT_PARAMS)
        print("Running small set of testing data")
        [_ for _ in run(**cfg)]

        print("Result saved to result folder")
    
    if 'test-data' in targets:
        cfg = load_params(TEST_DATA_PARAMS)
        try:
            [_ for _ in download_apks(**cfg)]

        except TypeError:
            print('With Type Error. But it does not affect the process')
        except:
            print('Unknown eror expected. This should not happen')
        finally:
            print(cfg["download_amount"]*len(cfg["catagory"]),'apps downloaded, decomplied and ingested to ',cfg['apk_path'])
            print('Finished Data ingestion')
            
    if 'train-data' in targets:
        cfg = load_params(TRAIN_DATA_PARAMS)
        try:
            [_ for _ in download_apks(**cfg)]
        except TypeError:
            print('With Type Error. But it does not affect the process')
        except:
            print('Unknown eror expected. This should not happen')
        finally:
            print(cfg["download_amount"]*len(cfg["catagory"]),'apps downloaded ingested to ',cfg['apk_path'])
            print('Finished Data ingestion')
            
    if 'process' in targets:
        print('Converting apk to smali')
        subprocess.check_output(["./temp.sh",'data'])
        print('Finished converting apk to smali')
        
if __name__ == '__main__':
    targets = sys.argv[1:]
    main(targets)